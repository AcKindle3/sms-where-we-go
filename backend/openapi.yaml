openapi: 3.0.0
info:
    version: 1.0.0
    title: SMS Where We Go API
    description: The official API for the SMS Where We Go project.

servers:
    - url: http://localhost:8080/v1
    - url: https://www.wherewego.cn/v1

components:
    responses:
        Success:
            description: Success
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Result"
        NotFound:
            description: Fail to find the specified resource
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Result"
        UnAuthorized:
            description: Unauthorized to access the resource
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Result"
        Forbidden:
            description: The user is not allowed to access the resource
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Result"
        Default:
            description: Default response telling whether the request is successful
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Result"
        Feedback:
            description: Return a list of feedbacks along with associated comments
            content:
                application/json:
                    schema:
                        type: object
                        allOf:
                            - $ref: "#/components/schemas/Result"
                            - type: object
                              properties:
                                  feedbacks:
                                      type: array
                                      items:
                                          allOf:
                                              - $ref: "#/components/schemas/Feedback"
                                              - $ref: "#/components/schemas/FeedbackInfo"
                                              - type: object
                                                required:
                                                    - feedback_uid
                                                    - status
                                                    - comments
                                                    - posted_at
                                                properties:
                                                    feedback_uid:
                                                        type: string
                                                        description: The unique id of a feedback
                                                    sender_uid:
                                                        type: integer
                                                        description: The uid of the sender if the feedback was sent by a registered user
                                                    status:
                                                        type: string
                                                        enum:
                                                            [
                                                                "resolved",
                                                                "pending",
                                                                "closed",
                                                            ]
                                                    comments:
                                                        type: array
                                                        items:
                                                            $ref: "#/components/schemas/FeedbackComment"
                                                    posted_at:
                                                        type: string
                                                        format: date
    schemas:
        Coordinate:
            type: object
            description: A coordinate in WGS84 format
            required:
                - longitude
                - latitude
            properties:
                longitude:
                    type: number
                    minimum: -180
                    maximum: 180
                latitude:
                    type: number
                    minimum: -90
                    maximum: 90
        Offset:
            type: integer
            default: 0
            example: 0
            minimum: 0
        Limit:
            type: integer
            example: 100
            minimum: 1
            maximum: 100
        Result:
            type: object
            required:
                - result
                - message
            properties:
                result:
                    type: string
                    enum: [success, error]
                message:
                    type: string
        Student:
            type: object
            properties:
                name:
                    type: string
                    description: The name of the student
                    maxLength: 30
                    example: Noel Li
                class_number:
                    type: integer
                    description: The class number of the student at high school
                    minimum: 1
                    maximum: 100
                    example: 2
                grad_year:
                    type: integer
                    description: The year when the student graduates from high school
                    format: year
                    example: 2021
                curriculum:
                    type: string
                    description: The curriculum of the student at high school
                    example: gaokao
                phone_number:
                    type: string
                    example: 13912345678
                email:
                    type: string
                    format: email
                    example: dcwang@shenzhong.net
                wxid:
                    type: string
                    maxLength: 20
                    example: asdasdfffggghhhjjj
                department:
                    type: string
                    maxLength: 40
                    example: School of Engineering
                major:
                    type: string
                    maxLength: 40
                    example: Accouting
                school_uid:
                    type: integer
                    example: 12
        StudentVerbose:
            type: object
            required:
                - uid
                - name
                - class_number
                - grad_year
            properties:
                uid:
                    type: integer
                    description: The unique identifier of the student
                    example: 12
                name:
                    type: string
                    description: The name of the student
                    maxLength: 30
                    example: Noel Li
                class_number:
                    type: integer
                    description: The class number of the student at high school
                    minimum: 1
                    maximum: 100
                    example: 2
                grad_year:
                    type: integer
                    description: The year when the student graduates from high school
                    format: year
                    example: 2021
        StudentFieldsVisibility:
            type: object
            properties:
                school_uid:
                    type: boolean
                phone_number:
                    type: boolean
                email:
                    type: boolean
                wxid:
                    type: boolean
                department:
                    type: boolean
                major:
                    type: boolean
                city:
                    type: boolean
                school_state_province:
                    type: boolean
                school_country:
                    type: boolean
        Feedback:
            type: object
            required:
                - title
                - content
                - reason
            properties:
                title:
                    default: ""
                    description: The title of the feedback message
                    type: string
                content:
                    default: ""
                    description: The written body of the feedback message
                    type: string
                reason:
                    description: The reason for sending the feedback
                    type: string
                    enum:
                        [
                            "general",
                            "registration",
                            "reset password",
                            "update info",
                            "improvement",
                        ]
        FeedbackInfo:
            type: object
            properties:
                name:
                    description: The name of the user
                    type: string
                email:
                    description: Email for contact
                    type: string
                phone_number:
                    description: Phone number for contact
                    type: string
                class_number:
                    description: The class number reported by the student
                    type: integer
                grad_year:
                    description: The year of graduation reported by the student
                    type: integer
        FeedbackComment:
            type: object
            required:
                - content
                - sender_name
                - posted_at
            properties:
                content:
                    type: string
                sender_name:
                    type: string
                posted_at:
                    type: string
                    format: datetime
        RegistrationKeyInfo:
            type: object
            properties:
                class_number:
                    type: integer
                    example: 12
                grad_year:
                    type: integer
                    example: 2021
                curriculum:
                    type: string
                    example: international
                expiration_date:
                    type: string
                    format: date
        School:
            type: object
            required:
                - school_name
            properties:
                latitude:
                    type: number
                    example: 22.5514
                longitude:
                    type: number
                    example: 114.1216
                school_name:
                    type: string
                    example: The University
                school_country:
                    type: string
                    example: China
                school_state_province:
                    type: string
                    example: Guangdong
                city:
                    type: string
                    example: Shenzhen
        City:
            type: object
            required:
                - city_uid
                - city
                - country
            properties:
                city_uid:
                    type: integer
                    description: The unique identifier of the city
                city:
                    type: string
                    example: New York City
                state_province:
                    type: string
                    example: New York
                country:
                    type: string
                    example: United States
        Class:
            type: object
            required:
                - class_number
                - grad_year
                - curriculum
            properties:
                class_number:
                    type: integer
                    minimum: 1
                    maximum: 100
                    example: 2
                grad_year:
                    type: integer
                    format: year
                    example: 2021
                curriculum:
                    type: string
                    example: gaokao
        Visibility:
            type: string
            description: >
                * `private`: Visible only to the student themself
                * `class`: Visible only to the students in the same class
                * `curriculum`: Visible only to the students within the same curriculum
                * `year`: Visible only to the students who graduate in the same year
                * `students`: Visible only to any registered users (including past and future students)
            enum:
                - private
                - class
                - curriculum
                - year
                - students
        Role:
            type: string
            description: >
                * `student` Limited write access to the user itself
                * `class` Write access to the students within a class
                * `curriculum` Write access to the student within a curriculum
                * `year` Write access to the students who graduate in the same year
                * `system` Write access to the all students including admin students
            enum:
                - student
                - class
                - curriculum
                - year
                - system
    securitySchemes:
        sessionAuth:
            type: apiKey
            in: cookie
            name: connect.sid
        bearerAuth:
            type: http
            scheme: bearer
    headers:
        X-RateLimit-Limit:
            schema:
                type: integer
        X-RateLimit-Remaining:
            schema:
                type: integer
        X-RateLimit-Reset:
            schema:
                type: string
                format: date-time
security:
    - sessionAuth: []
    - bearerAuth: []
paths:
    /roster:
        get:
            operationId: getRoster
            description: Return a roster containing the students and schools information
            responses:
                "200":
                    description: Sucessfully retrieved the roster
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      required:
                                          - students
                                          - schools
                                      properties:
                                          schools:
                                              type: array
                                              items:
                                                  allOf:
                                                      - $ref: "#/components/schemas/School"
                                                      - type: object
                                                        required:
                                                            - uid
                                                        properties:
                                                            uid:
                                                                type: integer
                                                                description: The unique identifier of the school
                                                                example: 12
                                                            students:
                                                                type: array
                                                                items:
                                                                    allOf:
                                                                        - $ref: "#/components/schemas/Student"
                                                                        - $ref: "#/components/schemas/StudentVerbose"
                "403":
                    $ref: "#/components/responses/UnAuthorized"
    /login:
        post:
            operationId: login
            description: Handle a login request
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: object
                                  required:
                                      - password
                                  properties:
                                      password:
                                          type: string
                                          example: password123
                                - oneOf:
                                      - type: object
                                        required:
                                            - identifier
                                        properties:
                                            use_uid:
                                                type: boolean
                                                description: When set to true, the identifier will be used as the uid of the student
                                                enum: [false]
                                            identifier:
                                                description: The identifier of the username, which can be the uid, phone number or email
                                                type: string
                                      - type: object
                                        required:
                                            - identifier
                                        properties:
                                            use_uid:
                                                type: boolean
                                                description: When set to true, the identifier will be used as the uid of the student
                                                enum: [true]
                                            identifier:
                                                type: number
                                                description: The identifier as a student uid
                                                maximum: 2147483647
            responses:
                "200":
                    description: Return whether the login is a success
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Result"
                "400":
                    $ref: "#/components/responses/Default"
                default:
                    $ref: "#/components/responses/Default"
    /dev-login:
        get:
            operationId: getDevLogin
            description: Only available in development. Get a list of available users to login
            security: []
            responses:
                200:
                    description: Successfully return the list of users.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          users:
                                              type: array
                                              items:
                                                  allOf:
                                                      - $ref: "#/components/schemas/StudentVerbose"
                                                      - type: object
                                                        required:
                                                            - role
                                                        properties:
                                                            role:
                                                                $ref: "#/components/schemas/Role"
        post:
            operationId: postDevLogin
            description: Only available in development. Login using the student with the specified uid, password is not required
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - uid
                            properties:
                                uid:
                                    type: integer
                                    description: The unique identifier of the user
            responses:
                200:
                    description: Return the role of the logged in user
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          role:
                                              $ref: "#/components/schemas/Role"
    /student:
        get:
            operationId: getStudent
            description: >
                Return the information of students. Result is scoped by the user role.
                For example: a "student" user cannot see others role and visibility settings,
                but an admin user, like those with the role "class" can. Apart from that, admin
                users can ignore the visibility settings of the students who are under their
                administration.
            parameters:
                - in: query
                  name: self
                  schema:
                      type: boolean
                      example: false
                      description: Indicate whether to only fetch the user themself. If set to true, all the other parameters will be ignored.
                - in: query
                  name: can_update_only
                  schema:
                      type: boolean
                      default: false
                      description: Only return students that can be updated by the caller
                - in: query
                  name: name
                  schema:
                      type: string
                      example: Steven King
                - in: query
                  name: phone_number
                  schema:
                      type: string
                      example: 13612341234
                - in: query
                  name: curriculum
                  schema:
                      type: string
                      example: international
                - in: query
                  name: city
                  schema:
                      type: string
                      example: Shenzhen
                - in: query
                  name: school_state_province
                  schema:
                      type: string
                      example: Guangdong
                - in: query
                  name: school_country
                  schema:
                      type: string
                      example: China
                - in: query
                  name: limit
                  schema:
                    type: integer
                - in: query
                  name: offset
                  schema:
                    type: integer
            responses:
                200:
                    description: Return a list of students
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          students:
                                              type: array
                                              items:
                                                  allOf:
                                                      - $ref: "#/components/schemas/Student"
                                                      - $ref: "#/components/schemas/StudentVerbose"
                                                      - $ref: "#/components/schemas/School"
                                                      - type: object
                                                        properties:
                                                            role:
                                                                $ref: "#/components/schemas/Role"
                                                            visibility:
                                                                $ref: "#/components/schemas/Visibility"
                                                            field_visibility:
                                                                $ref: "#/components/schemas/StudentFieldsVisibility"
                                                            self:
                                                                type: boolean
                                                                description: Indicating whether the current student is the caller
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        post:
            operationId: postStudent
            description: Add a new student (registration key is required for new users)
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/Student"
                                - type: object
                                  required:
                                      - name
                                      - password
                                      - registration_key
                                  properties:
                                      name:
                                          type: string
                                      password:
                                          type: string
                                          format: password
                                          example: password123
                                      curriculum:
                                          enum: [null]
                                      registration_key:
                                          type: string
                                          minLength: 8
                                          maxLength: 14
                                          description: The registration key provided by the maintainer for each class which fills class_number, year, and curriculum for the student
                                          example: asdfghjk
                                - oneOf:
                                      - type: object
                                        description: Only required for new users
                                        required:
                                            - registration_key
                                        properties:
                                            registration_key:
                                                type: string
                                                description: The registration key provided by the maintainer for each class which fills class_number, year, and curriculum for the student
                                                example: asdfghjk
                                            # To be added
                                            #verification_code:
                                            #  description: If the phone number is specified, the verification code will be required
                                            #  type: integer
                                            #  example: 32874
                                      - type: object
                                        description: Only accessible to admin users
                                        required:
                                            - class_number
                                            - grad_year
                                        properties:
                                            class_number:
                                                type: integer
                                                example: 4
                                            grad_year:
                                                type: integer
                                                example: 2019
            responses:
                200:
                    $ref: "#/components/responses/Default"
                400:
                    $ref: "#/components/responses/Default"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        put:
            operationId: updateStudent
            description: Update the information of a student
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/Student"
                                - type: object
                                  properties:
                                      student_uid:
                                          description: If not specified, update the current logged in student
                                          type: integer
                                          maximum: 2147483647
                                          example: 3
                                      visibility:
                                          $ref: "#/components/schemas/Visibility"
                                      role:
                                          $ref: "#/components/schemas/Role"
                                      password:
                                          description: The new password
                                          type: string
                                          format: password
                                          example: pasword123
                                      class_number:
                                          type: integer
                                          example: 18
                                      grad_year:
                                          type: integer
                                          example: 2021
                                      curriculum:
                                          enum: [""]
                                      clear:
                                          description: The fields that need to be cleared
                                          type: array
                                          items:
                                              enum:
                                                  [
                                                      "email",
                                                      "phone_number",
                                                      "school_uid",
                                                  ]
                                      field_visibility:
                                          $ref: "#/components/schemas/StudentFieldsVisibility"
            responses:
                200:
                    $ref: "#/components/responses/Default"
                400:
                    $ref: "#/components/responses/Default"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        delete:
            operationId: deleteStudent
            description: Delete a student
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - student_uid
                            properties:
                                student_uid:
                                    type: integer
                                    description: The unique identifier of the student
                                    maximum: 2147483647
                                    example: 21
            responses:
                200:
                    $ref: "#/components/responses/Success"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
    /validate:
        post:
            operationId: validate
            description: Validate whether the provided registration key is valid and return corresponding information
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - registration_key
                            properties:
                                registration_key:
                                    type: string
                                    minLength: 8
                                    maxLength: 14
                                    example: asdfghjk
            responses:
                200:
                    description: Tell whether the key is valid and return the related information
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - $ref: "#/components/schemas/RegistrationKeyInfo"
    /school:
        get:
            operationId: getSchool
            description: Search for schools
            security: []
            parameters:
                - in: query
                  name: offset
                  schema:
                      type: integer
                      default: 0
                      example: 0
                      minimum: 0
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 100
                      example: 100
                      minimum: 1
                      maximum: 100
                - in: query
                  name: school_name
                  schema:
                      type: string
                      example: The University
                - in: query
                  name: school_country
                  schema:
                      type: string
                      example: China
                - in: query
                  name: school_state_province
                  schema:
                      type: string
                      example: Guangdong
                - in: query
                  name: city
                  schema:
                      type: string
                      example: Shenzhen
                - in: query
                  name: uid
                  schema:
                      type: integer
                      example: 1
            responses:
                200:
                    description: Return the schools that satisfy the constraints
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          schools:
                                              type: array
                                              items:
                                                  allOf:
                                                      - $ref: "#/components/schemas/School"
                                                      - type: object
                                                        required:
                                                            - uid
                                                        properties:
                                                            uid:
                                                                type: integer
                                                                description: The unique identifier of the school
                                                                example: 12
                                                            matched_alias:
                                                                type: string
                                                                description: The alias that matches the queried school_name
        post:
            operationId: postSchool
            description: Add a new school
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/School"
                                - type: object
                                  properties:
                                      city_uid:
                                          type: integer
                                          example: 121
                                          description: The uid of the city
            responses:
                200:
                    description: Successfully added the school and return the id
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          school_uid:
                                              type: integer
                                              example: 21
                400:
                    $ref: "#/components/responses/Default"
        delete:
            operationId: deleteSchool
            description: Delete an existing school
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - school_uid
                            properties:
                                school_uid:
                                    type: integer
            responses:
                200:
                    $ref: "#/components/responses/Success"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
    /role:
        get:
            operationId: getRole
            description: Get the role of the logged in student
            responses:
                200:
                    description: Successfully fetched the role
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          role:
                                              $ref: "#/components/schemas/Role"
                                          level:
                                              type: integer
                                              description: The privilege level of the student, the higher the greater
                                              example: 0
                                          description:
                                              type: string
                                              example: Limited write access to the user itself
                401:
                    $ref: "#/components/responses/UnAuthorized"
    /city:
        get:
            operationId: getCity
            description: Get existing cities that match the query params
            security: []
            parameters:
                - in: query
                  name: offset
                  schema:
                      type: integer
                      default: 0
                      example: 0
                      minimum: 0
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 100
                      example: 100
                      minimum: 1
                      maximum: 100
                - in: query
                  name: city
                  schema:
                      type: string
                      example: New York City
                - in: query
                  name: state_province
                  schema:
                      type: string
                      example: New York
                - in: query
                  name: country
                  schema:
                      type: string
                      example: United States
            responses:
                200:
                    description: Return a list of cities that match the query params
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          cities:
                                              type: array
                                              items:
                                                  $ref: "#/components/schemas/City"
    /registration-key:
        get:
            operationId: getRegistrationKey
            description: Get the registration keys that the current student can access. It is only usable for admin users
            parameters:
                - name: offset
                  in: query
                  schema:
                      $ref: "#/components/schemas/Offset"
                - name: limit
                  in: query
                  schema:
                      $ref: "#/components/schemas/Limit"
                - name: not_expired
                  in: query
                  description: When set to true, only registration keys that haven't expired will be returned
                  schema:
                      type: boolean
                      default: true
            responses:
                200:
                    description: Return the information about
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      properties:
                                          registration_keys:
                                              type: array
                                              items:
                                                  allOf:
                                                      - $ref: "#/components/schemas/RegistrationKeyInfo"
                                                      - type: object
                                                        properties:
                                                            registration_key:
                                                                type: string
                                                                minLength: 8
                                                                maxLength: 14
                                                                example: 202006asdfghjk
                                                            activated:
                                                                type: boolean
                                                                description: Whether the registration key is activated or deactivated. This is irrelevant to the expiration date
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        post:
            operationId: postRegistrationKey
            description: Add a new registration key
            requestBody:
                required: false
                description: If the requestbody is not given, the registration key will be created for the class of the requester
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                class_number:
                                    type: number
                                    description: The class number for the registration key. If not specified, the class number of the requester is used. Only curriculum, year or system admin can specify class numbers other than their current class number
                                grad_year:
                                    type: number
                                    description: The grad year for the registration key. If not specified, the grad year of the requester is used. Only system admin can specify grad year other than their grad year
            responses:
                200:
                    description: When the registration key is successfully created or rejected due to duplication or invalid class
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - $ref: "#/components/schemas/RegistrationKeyInfo"
                                    - type: object
                                      properties:
                                          registration_key:
                                              type: string
                                              description: The registration key you have just created
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        put:
            operationId: updateRegistrationKey
            description: Update the state of the regitration key
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                registration_key:
                                    type: string
                                    description: The registration key
                                    maxLength: 14
                                    minLength: 8
                                expiration_date:
                                    type: string
                                    description: The expiration date is used to identify registration key and it cannot be changed
                                activate:
                                    type: boolean
                                    description: Whether to activate or deactivate the registration key
            responses:
                200:
                    $ref: "#/components/responses/Success"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
    /class:
        get:
            operationId: getClass
            description: Get classes that are accessible to the current user.
            responses:
                200:
                    description: Return a list of classes
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      required:
                                          - classes
                                      properties:
                                          classes:
                                              type: array
                                              items:
                                                  $ref: "#/components/schemas/Class"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        post:
            operationId: postClass
            description: Add a new class. This is only usable for curriculum admins or higher level admins
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Class"
            responses:
                200:
                    $ref: "#/components/responses/Success"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
        delete:
            operationId: deleteClass
            description: Delete an existing class. This is only usable for curriculum admins or higher level admins
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - class_number
                                - grad_year
                            properties:
                                class_number:
                                    type: integer
                                    minimum: 1
                                    maximum: 100
                                grad_year:
                                    type: integer
                                    format: year
                                force:
                                    type: boolean
                                    default: false
                                    description: Delete the class anyway even if there are students associated with it. This will delete those students as well
            responses:
                200:
                    $ref: "#/components/responses/Default"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
    /location:
        get:
            description: Query the coordinate of schools
            operationId: getLocation
            parameters:
                - name: page
                  in: query
                  schema:
                      type: integer
                      default: 1
                - name: keywords
                  in: query
                  required: true
                  schema:
                      type: string
                      maxLength: 100
                - name: city
                  in: query
                  schema:
                      type: string
                      maxLength: 100
                - name: country
                  in: query
                  schema:
                      type: string
                      maxLength: 100
                - name: provider
                  in: query
                  schema:
                      type: string
                      enum:
                          - amap
                          - mapbox
                      default: amap
            responses:
                200:
                    headers:
                        X-RateLimit-Limit:
                            $ref: "#/components/headers/X-RateLimit-Limit"
                        X-RateLimit-Remaining:
                            $ref: "#/components/headers/X-RateLimit-Remaining"
                        X-RateLimit-Reset:
                            $ref: "#/components/headers/X-RateLimit-Reset"
                    description: Return a list of possible coordinates
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/Result"
                                    - type: object
                                      required:
                                          - locations
                                      properties:
                                          locations:
                                              type: array
                                              items:
                                                  allOf:
                                                      - $ref: "#/components/schemas/Coordinate"
                                                      - type: object
                                                        required:
                                                            - name
                                                        properties:
                                                            name:
                                                                type: string
                                                            city:
                                                                type: string
                                                            address:
                                                                type: string
    /feedback/view:
        get:
            operationId: viewGetFeedback
            description: Fetch feedbacks as a normal user
            responses:
                200:
                    $ref: "#/components/responses/Feedback"
    /feedback/manage:
        get:
            operationId: manageGetFeedback
            description: Fetch feedbacks as an admin
            responses:
                200:
                    $ref: "#/components/responses/Feedback"
    /feedback/{feedback_uid}/update:
        put:
            parameters:
                - in: path
                  name: feedback_uid
                  required: true
                  schema:
                      type: string
            operationId: updateFeedback
            description: Manage feedbacks
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - status
                            properties:
                                status:
                                    type: string
                                    enum: ["resolved", "pending", "closed"]
            responses:
                200:
                    $ref: "#/components/responses/Success"
                401:
                    $ref: "#/components/responses/UnAuthorized"
                403:
                    $ref: "#/components/responses/Forbidden"
    /feedback/{feedback_uid}/comment:
        post:
            parameters:
                - in: path
                  name: feedback_uid
                  required: true
                  schema:
                      type: string
            operationId: commentFeedback
            description: Manage feedbacks
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                anonymous:
                                    type: boolean
                                    default: false
                                    description: Whether to reveal the sender name or not
                                content:
                                    type: string
                                    maxLength: 255
            responses:
                200:
                    $ref: "#/components/responses/Success"
    /feedback/report/public:
        post:
            operationId: publicReportFeedback
            description: Send a new feedback
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/Feedback"
                                - $ref: "#/components/schemas/FeedbackInfo"
            responses:
                200:
                    description: Successfully sent the feedback and return its unique id
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - feedback_uid
                                properties:
                                    feedback_uid:
                                        type: string
                                        description: The unique id of the feedback just created
    /feedback/report/user:
        post:
            operationId: userReportFeedback
            description: Send a new feedback as a logged in user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Feedback"
            responses:
                200:
                    description: Successfully sent the feedback and return its unique id
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    feedback_uid:
                                        type: string
                                        description: The unique id of the feedback just created
    /logout:
        get:
            operationId: logout
            description: Logout the current user
            responses:
                200:
                    description: Successfully logged out and removed the current session
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Result"
    /like:
        get:
            operationId: getLikes
            description: Get the number of likes the site has received
            responses:
                200:
                    description: Return the total number of likes
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - count
                                properties:
                                    count:
                                        type: integer
                                        description: The total number of likes
                401:
                    $ref: "#/components/responses/Success"
                403:
                    $ref: "#/components/responses/Forbidden"
        post:
            operationId: like
            description: Give a like to the developers
            responses:
                200:
                    $ref: "#/components/responses/Success"
                401:
                    $ref: "#/components/responses/UnAuthorized"
